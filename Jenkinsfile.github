/*
 *
 *  MIT License
 *
 *  (C) Copyright 2025 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library') _

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        NAME = "cray-rrs"
        RRS_API_IMAGE_NAME = "cray-rrs/cray-rrs-api"
        RRS_INIT_IMAGE_NAME = "cray-rrs/cray-rrs-init"
        RRS_RMS_IMAGE_NAME = "cray-rrs/cray-rrs-rms"
        DESCRIPTION = "Implements Rack Resiliency Service."
        IS_STABLE = getBuildIsStable()
        VERSION = getDockerBuildVersion(isStable: env.IS_STABLE)
        DOCKER_ARGS = getDockerBuildArgs(name: env.NAME, description: env.DESCRIPTION)
        CHART_VERSION = getChartVersion(version: env.VERSION)
    }

    stages {
        stage("Lint") {
            steps {
                sh "make lint"
            }
        }

        stage("Unittests") {
            steps {
                sh "make unittests"
            }
        }

        stage("Build") {
            parallel {
                stage('Image') {
                    steps {
                        sh "make images"
                    }
                }

                // stage('Chart') {
                //     environment {
                //        IMAGE = "artifactory.algol60.net/csm-docker/${env.IS_STABLE ? "stable" : "unstable"}/${env.NAME}"
                //     }
                //     steps {
                //         sh "make chart"
                //     }
                // }
            }
        }

        stage("Publish") {
            steps {
                script {
                    publishCsmDockerImage(image: env.RRS_API_IMAGE_NAME, tag: env.VERSION, isStable: env.IS_STABLE, snykTargetFile: "Dockerfile.rrs.api")
                    publishCsmDockerImage(image: env.RRS_INIT_IMAGE_NAME, tag: env.VERSION, isStable: env.IS_STABLE, snykTargetFile: "Dockerfile.rrs.init")
                    publishCsmDockerImage(image: env.RRS_RMS_IMAGE_NAME, tag: env.VERSION, isStable: env.IS_STABLE, snykTargetFile: "Dockerfile.rrs.rms")
                    // publishCsmHelmCharts(component: env.NAME, chartsPath: "${WORKSPACE}/packages", isStable: env.IS_STABLE)
                }
            }
        }
    }
}
